{"ast":null,"code":"import { HttpRequest, HttpHandler, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError, empty, Subject } from 'rxjs';\nimport { AuthService } from './auth.service';\nimport { catchError, tap, switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nexport let WebReqInterceptor = /*#__PURE__*/(() => {\n  class WebReqInterceptor {\n    constructor(authService) {\n      this.authService = authService;\n      this.accessTokenRefreshed = new Subject();\n    }\n    intercept(request, next) {\n      // Handle the request\n      request = this.addAuthHeader(request);\n      // call next() and handle the response\n      return next.handle(request).pipe(catchError(error => {\n        console.log(error);\n        if (error.status === 401) {\n          // 401 error so we are unauthorized\n          // refresh the access token\n          return this.refreshAccessToken().pipe(switchMap(() => {\n            request = this.addAuthHeader(request);\n            return next.handle(request);\n          }), catchError(err => {\n            console.log(err);\n            this.authService.logout();\n            return empty();\n          }));\n        }\n        return throwError(error);\n      }));\n    }\n    refreshAccessToken() {\n      if (this.refreshingAccessToken) {\n        return new Observable(observer => {\n          this.accessTokenRefreshed.subscribe(() => {\n            // this code will run when the access token has been refreshed\n            observer.next();\n            observer.complete();\n          });\n        });\n      } else {\n        this.refreshingAccessToken = true;\n        // we want to call a method in the auth service to send a request to refresh the access token\n        return this.authService.getNewAccessToken().pipe(tap(() => {\n          console.log(\"Access Token Refreshed!\");\n          this.refreshingAccessToken = false;\n          this.accessTokenRefreshed.next();\n        }));\n      }\n    }\n    addAuthHeader(request) {\n      // get the access token\n      const token = this.authService.getAccessToken();\n      if (token) {\n        // append the access token to the request header\n        return request.clone({\n          setHeaders: {\n            'x-access-token': token\n          }\n        });\n      }\n      return request;\n    }\n    static #_ = this.ɵfac = function WebReqInterceptor_Factory(t) {\n      return new (t || WebReqInterceptor)(i0.ɵɵinject(i1.AuthService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: WebReqInterceptor,\n      factory: WebReqInterceptor.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return WebReqInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}